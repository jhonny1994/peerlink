// Firebase configuration template
// Generate this file by running: flutterfire configure
// 
// Instructions:
// 1. Install Firebase CLI: npm install -g firebase-tools
// 2. Login: firebase login
// 3. Run: dart pub global run flutterfire_cli:flutterfire configure --project=peerlink
// 4. This will generate the actual firebase_options.dart with your project credentials
//
// DO NOT commit the generated file - it contains API keys and project IDs

import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'Run `flutterfire configure` to generate Firebase config for web',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        throw UnsupportedError(
          'Run `flutterfire configure` to generate Firebase config for android',
        );
      case TargetPlatform.iOS:
        throw UnsupportedError(
          'Run `flutterfire configure` to generate Firebase config for ios',
        );
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'Run `flutterfire configure` to generate Firebase config for macos',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'Run `flutterfire configure` to generate Firebase config for windows',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'Run `flutterfire configure` to generate Firebase config for linux',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }
}
